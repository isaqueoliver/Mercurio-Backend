// <auto-generated />
using System;
using Back.Mercurio.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Back.Mercurio.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221112123339_Add_Seed_Data_Estado")]
    partial class Add_Seed_Data_Estado
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Back.Mercurio.Domain.Models.Assunto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Assuntos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("40fe795e-c60e-4afb-abf0-07c0c599d1d0"),
                            Ativo = true,
                            Descricao = "Falta o nome de um Supermercado ou Mercado"
                        },
                        new
                        {
                            Id = new Guid("ce6b710e-1740-471a-b2ae-899cd2e433c8"),
                            Ativo = true,
                            Descricao = "Falta o nome de um Produto ou informação do Produto"
                        });
                });

            modelBuilder.Entity("Back.Mercurio.Domain.Models.CarrinhoCliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mercado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId")
                        .HasDatabaseName("IDX_Cliente");

                    b.ToTable("CarrinhoCliente");
                });

            modelBuilder.Entity("Back.Mercurio.Domain.Models.CarrinhoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarrinhoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Imagem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CarrinhoId");

                    b.ToTable("CarrinhoItens");
                });

            modelBuilder.Entity("Back.Mercurio.Domain.Models.Cidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EstadoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.ToTable("Cidades");
                });

            modelBuilder.Entity("Back.Mercurio.Domain.Models.Estado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Estados");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ad1495c-996e-4c95-95da-01d3c458b61e"),
                            Sigla = "AC"
                        },
                        new
                        {
                            Id = new Guid("160f16e3-f932-45c8-9d27-a3636c53b8fe"),
                            Sigla = "AL"
                        },
                        new
                        {
                            Id = new Guid("f8649009-0894-4ebe-a649-e7a9ab7893f7"),
                            Sigla = "AP"
                        },
                        new
                        {
                            Id = new Guid("7376e701-2ab1-4552-807d-627a9cbfed50"),
                            Sigla = "AM"
                        },
                        new
                        {
                            Id = new Guid("e6051ad2-6eb4-4540-b24b-26d2eea3d2ca"),
                            Sigla = "BA"
                        },
                        new
                        {
                            Id = new Guid("432f6c81-2e45-4cb4-a9da-a041704e345d"),
                            Sigla = "CE"
                        },
                        new
                        {
                            Id = new Guid("a5ede577-fb1f-4241-87bf-5ddc88940687"),
                            Sigla = "ES"
                        },
                        new
                        {
                            Id = new Guid("d55e7051-9a5f-4582-8858-765257fb4e2d"),
                            Sigla = "GO"
                        },
                        new
                        {
                            Id = new Guid("853f114f-c716-4414-ba99-16f09b37a939"),
                            Sigla = "MA"
                        },
                        new
                        {
                            Id = new Guid("9d8b78c8-fe99-44e9-a3af-13a3ad6ed732"),
                            Sigla = "MT"
                        },
                        new
                        {
                            Id = new Guid("d094382a-03b7-4d81-af59-95a9681ce34d"),
                            Sigla = "MS"
                        },
                        new
                        {
                            Id = new Guid("384891ad-6783-475e-92aa-667d899c84a8"),
                            Sigla = "MG"
                        },
                        new
                        {
                            Id = new Guid("26fe5cb4-34c3-4917-a173-87fcac49e51c"),
                            Sigla = "PA"
                        },
                        new
                        {
                            Id = new Guid("2be8c546-da5a-4651-b81f-3e0e22f81c96"),
                            Sigla = "PB"
                        },
                        new
                        {
                            Id = new Guid("1424de85-0be0-4467-9f38-85f69dcae9ae"),
                            Sigla = "PR"
                        },
                        new
                        {
                            Id = new Guid("f40419f3-6efb-485b-b08d-3adee1bc5be6"),
                            Sigla = "PE"
                        },
                        new
                        {
                            Id = new Guid("5ffaeef0-a1e6-4e65-98eb-d89f89fe5a41"),
                            Sigla = "PI"
                        },
                        new
                        {
                            Id = new Guid("3e53022f-1b95-4d14-917f-c02288a29494"),
                            Sigla = "RJ"
                        },
                        new
                        {
                            Id = new Guid("33eb429c-eac5-46ee-99ec-f770e7e9865d"),
                            Sigla = "RN"
                        },
                        new
                        {
                            Id = new Guid("49138c5d-4d92-44c0-8776-c2976fb636ee"),
                            Sigla = "RS"
                        },
                        new
                        {
                            Id = new Guid("fa3af446-1bf4-4374-a1cc-ac0369ab0ec1"),
                            Sigla = "RO"
                        },
                        new
                        {
                            Id = new Guid("1796e1b5-268a-4999-aeff-d7d9d2802984"),
                            Sigla = "RR"
                        },
                        new
                        {
                            Id = new Guid("3ff8be8a-e669-4626-aa47-f16b584e3939"),
                            Sigla = "SC"
                        },
                        new
                        {
                            Id = new Guid("ad6c5137-98f4-4e1c-b2af-f77122672b3b"),
                            Sigla = "SP"
                        },
                        new
                        {
                            Id = new Guid("77fd3d28-b2ba-472e-8ce8-561cc2fff17e"),
                            Sigla = "SE"
                        },
                        new
                        {
                            Id = new Guid("19cc64f0-a02e-47d1-a213-174443b8e2ae"),
                            Sigla = "TO"
                        },
                        new
                        {
                            Id = new Guid("fe9058f9-f26d-4c2f-8cc9-b1f0278d311f"),
                            Sigla = "DF"
                        });
                });

            modelBuilder.Entity("Back.Mercurio.Domain.Models.Mercado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioExclusao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Mercados");
                });

            modelBuilder.Entity("Back.Mercurio.Domain.Models.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Categoria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdMercado")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Imagem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MercadoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioCadastro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MercadoId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("Back.Mercurio.Domain.Models.ProdutoUsuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EstadoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MercadoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioExclusao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CidadeId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("MercadoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ProdutoUsuarios");
                });

            modelBuilder.Entity("Back.Mercurio.Domain.Models.ProdutoValorMedio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<Guid>("CidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EstadoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MercadoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CidadeId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("MercadoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ProdutosValoresMedios");
                });

            modelBuilder.Entity("Back.Mercurio.Domain.Models.Reporte", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssuntoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resposta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UsuarioAlteracao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioExclusao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AssuntoId");

                    b.ToTable("Reportes");
                });

            modelBuilder.Entity("Back.Mercurio.Infrastructure.Seed.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("CidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("EstadoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Back.Mercurio.Domain.Models.CarrinhoItem", b =>
                {
                    b.HasOne("Back.Mercurio.Domain.Models.CarrinhoCliente", "CarrinhoCliente")
                        .WithMany("Itens")
                        .HasForeignKey("CarrinhoId")
                        .IsRequired();

                    b.Navigation("CarrinhoCliente");
                });

            modelBuilder.Entity("Back.Mercurio.Domain.Models.Cidade", b =>
                {
                    b.HasOne("Back.Mercurio.Domain.Models.Estado", "Estado")
                        .WithMany("Cidades")
                        .HasForeignKey("EstadoId")
                        .IsRequired();

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("Back.Mercurio.Domain.Models.Produto", b =>
                {
                    b.HasOne("Back.Mercurio.Domain.Models.Mercado", "Mercado")
                        .WithMany("Produtos")
                        .HasForeignKey("MercadoId")
                        .IsRequired();

                    b.Navigation("Mercado");
                });

            modelBuilder.Entity("Back.Mercurio.Domain.Models.ProdutoUsuario", b =>
                {
                    b.HasOne("Back.Mercurio.Domain.Models.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("CidadeId")
                        .IsRequired();

                    b.HasOne("Back.Mercurio.Domain.Models.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .IsRequired();

                    b.HasOne("Back.Mercurio.Domain.Models.Mercado", "Mercado")
                        .WithMany("ProdutosUsuarios")
                        .HasForeignKey("MercadoId")
                        .IsRequired();

                    b.HasOne("Back.Mercurio.Domain.Models.Produto", "Produto")
                        .WithMany("ProdutoUsuarios")
                        .HasForeignKey("ProdutoId")
                        .IsRequired();

                    b.Navigation("Cidade");

                    b.Navigation("Estado");

                    b.Navigation("Mercado");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Back.Mercurio.Domain.Models.ProdutoValorMedio", b =>
                {
                    b.HasOne("Back.Mercurio.Domain.Models.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("CidadeId")
                        .IsRequired();

                    b.HasOne("Back.Mercurio.Domain.Models.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .IsRequired();

                    b.HasOne("Back.Mercurio.Domain.Models.Mercado", "Mercado")
                        .WithMany("ProdutosValoresMedios")
                        .HasForeignKey("MercadoId")
                        .IsRequired();

                    b.HasOne("Back.Mercurio.Domain.Models.Produto", "Produto")
                        .WithMany("ProdutosValoresMedios")
                        .HasForeignKey("ProdutoId")
                        .IsRequired();

                    b.Navigation("Cidade");

                    b.Navigation("Estado");

                    b.Navigation("Mercado");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Back.Mercurio.Domain.Models.Reporte", b =>
                {
                    b.HasOne("Back.Mercurio.Domain.Models.Assunto", "Assunto")
                        .WithMany("Reportes")
                        .HasForeignKey("AssuntoId")
                        .IsRequired();

                    b.Navigation("Assunto");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Back.Mercurio.Infrastructure.Seed.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Back.Mercurio.Infrastructure.Seed.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back.Mercurio.Infrastructure.Seed.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Back.Mercurio.Infrastructure.Seed.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back.Mercurio.Domain.Models.Assunto", b =>
                {
                    b.Navigation("Reportes");
                });

            modelBuilder.Entity("Back.Mercurio.Domain.Models.CarrinhoCliente", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("Back.Mercurio.Domain.Models.Estado", b =>
                {
                    b.Navigation("Cidades");
                });

            modelBuilder.Entity("Back.Mercurio.Domain.Models.Mercado", b =>
                {
                    b.Navigation("Produtos");

                    b.Navigation("ProdutosUsuarios");

                    b.Navigation("ProdutosValoresMedios");
                });

            modelBuilder.Entity("Back.Mercurio.Domain.Models.Produto", b =>
                {
                    b.Navigation("ProdutoUsuarios");

                    b.Navigation("ProdutosValoresMedios");
                });
#pragma warning restore 612, 618
        }
    }
}
